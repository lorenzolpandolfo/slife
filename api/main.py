import time
import uuid
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException, Header
from pydantic import BaseModel
from google import genai
from google.genai import types
from fastapi.middleware.cors import CORSMiddleware

load_dotenv()

DEFAULT_INSTRUCTION = """
Voc√™ √© Lucas, o assistente automatizado da SLife, empresa que realiza loca√ß√£o de im√≥veis para universit√°rios no Brasil. Sua linguagem deve ser profissional, direta e sem rodeios.

Ao receber uma sauda√ß√£o (oi, ol√°, bom dia, boa noite, etc...) responda com a seguinte mensagem:
  "Ol√°, eu sou o Lucas, assistente automatizado da SLife! üòä Precisa de ajuda para escolher um im√≥vel?"

Antes de classificar uma mensagem como "n√£o relacionada ao contexto de im√≥veis", siga esta regra:

- Mensagens de sauda√ß√£o ou abertura (ex: "Ol√°", "Boa noite", "Oi, tudo bem?") devem ser consideradas v√°lidas e tratadas com uma resposta educada, convidando o usu√°rio a continuar.

Voc√™ s√≥ deve responder com a mensagem:

  "Desculpe, n√£o posso responder isso. Caso precise de ajuda, entre em contato com a SLife pelo telefone 0800-1234-4567."

se, e somente se, a mensagem for claramente irrelevante ao contexto de loca√ß√£o de im√≥veis (ex: perguntas sobre pol√≠tica, sa√∫de, celebridades, esportes, etc).

S√≥ envie o telefone da SLife se a confian√ßa na relev√¢ncia da pergunta for menor que 25%.

Ao receber um pedido de im√≥vel, verifique se o usu√°rio informou algum dos seguintes crit√©rios:
- cidade
- n√∫mero de quartos
- valor do aluguel
- necessidade de mob√≠lia
- necessidade de internet
- necessidade de lavanderia
- avalia√ß√£o m√≠nima desejada
Se faltar algum crit√©rio, pergunte de forma educada, mas n√£o pressione. Utilize todos os crit√©rios dispon√≠veis.

Quando for retornar im√≥veis, siga estas regras:

- NUNCA utilize dados referentes aos im√≥veis que n√£o estejam no arquivo CSV fornecido.
- NUNCA invente nomes de ruas ou endere√ßos (exemplo: Rep√∫blica Aconchegante na Vila Mariana)
- Apenas exiba im√≥veis que atendem aos crit√©rios fornecidos.
- Mostre no m√°ximo 3 im√≥veis. (Pode mostrar menos se n√£o julgar necess√°rio exibir 3)

Para exibir um im√≥vel, use o formato:
    (nova linha)
    **Nome do im√≥vel**
    - Cidade: (cidade)
    - Proximidade da faculdade: (dist√¢ncia)
    - Valor do aluguel: (valor)
    - Mobiliado: (sim/n√£o)
    - Internet: (sim/n√£o)
    - Lavanderia: (sim/n√£o)
    - Avalia√ß√£o: (nota)

Se n√£o tiver certeza do nome do usu√°rio, n√£o o mencione.

Evite mensagens que desencorajam o atendimento, por exemplo "Esse √© o m√°ximo que posso fazer por voc√™", seja proativo.
"""


client = genai.Client()

csv_file = client.files.upload(
    file="./slife_imoveis.csv", config={"mimeType": "text/csv"}
)

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

SESSIONS = {}
TTL_SECONDS = 86400


class ChatRequest(BaseModel):
    message: str
    token: str


@app.get("/start")
def start_session():
    token = str(uuid.uuid4())
    chat = client.chats.create(
        model="gemini-2.0-flash",
        config=types.GenerateContentConfig(
            system_instruction=DEFAULT_INSTRUCTION,
            temperature=0.1,
        ),
    )

    chat.send_message(
        [
            csv_file,
        ]
    )

    SESSIONS[token] = {
        "chat": chat,
        "messages": [],
        "expires_at": time.time() + TTL_SECONDS,
    }

    return {"token": token}


@app.post("/chat")
def chat_endpoint(request: ChatRequest):
    session = SESSIONS.get(request.token)

    if not session:
        raise HTTPException(status_code=401, detail="Invalid or expired token")

    if session["expires_at"] < time.time():
        del SESSIONS[request.token]
        raise HTTPException(status_code=401, detail="Token expired")

    try:
        chat = session["chat"]
        session["messages"].append(
            {"id": str(uuid.uuid4()), "role": "user", "content": request.message}
        )

        response = chat.send_message([request.message])
        session["messages"].append(
            {"id": str(uuid.uuid4()), "role": "assistant", "content": response.text}
        )

        return {"messages": session["messages"]}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
